import { Event, PrismaClient, InvoiceStatus } from '@prisma/client';
import dayjs from 'dayjs';

const prisma = new PrismaClient();

// type Invoice = {
//   // invoice number is generated by the system
//   invoiceNumber: string;
//   // sent by requester
//   createDate: Date;
//   // sent by requester
//   dueDate: Date;
//   // sent by requester
//   status: InvoiceStatus;
//   // created in backend
//   invoiceFrom: any;
//   // static value which is cult creative
//   invoiceTo: object;
//   // the service item which is static
//   items: object[];
//   // get it from the aggremant form data
//   totalAmount: number;
//   // get all of it from creator data
//   bankInfo: object;
//   // get it from the session
//   createdBy: string;
//   // sent by requester
//   campaignId: string;
// };

export const createInvoiceService = async (data: any, userId: any) => {
  // invoice number generator get it from frontend
  //console.log('data invoice', data, userId, '\n\n\n');
  const generateRandomInvoiceNumber = () => {
    const randomNumber = Math.floor(1000 + Math.random() * 9000);
    return `INV-${randomNumber}`;
  };

  const invoiceTo = {
    id: '1',
    name: 'Cult Creative',
    fullAddress:
      '4-402, Level 4, The Starling Mall, Lot 4-401 &, 6, Jalan SS 21/37, Damansara Utama, 47400 Petaling Jaya, Selangor',
    phoneNumber: '+60 11-5415 5751',
    company: 'Cult Creative',
    addressType: 'Hq',
    email: 'support@cultcreative.asia',
    primary: true,
  };
  // get item from aggremant form
  const item = {
    title: 'Posting on social media',
    description: 'posting on social media',
    service: 'Posting on social media',
    quantity: 1,
    price: 200,
    total: 200,
  };
  const invoiceFrom = {
    id: data.user.id,
    name: data.user.name,
    phoneNumber: data.user.phoneNumber,
    email: data.user.email,
    fullAddress: data.user.creator.fullAddress,
    company: data.user.creator.employment,
    addressType: 'Home',
    primary: false,
  };

  const bankInfo = {
    bankName: data.user.paymentForm.bankName,
    payTo: data.user.name,
    accountNumber: data.user.paymentForm.bankAccountNumber,
    accountEmail: data.user.email,
  };

  //console.log('other important data', invoiceFrom, invoiceTo, item, bankInfo);
  try {
    const newInvoice = await prisma.invoice.create({
      data: {
        invoiceNumber: generateRandomInvoiceNumber(),
        createdAt: data.updatedAt,
        dueDate: new Date(dayjs(data.updatedAt).add(15, 'day').format()),
        status: 'draft' as InvoiceStatus,
        invoiceFrom: invoiceFrom,
        invoiceTo,
        task: item,
        amount: 200.0,
        bankAcc: bankInfo,
        campaignId: data.campaignId,
        creatorId: data.userId,
        createdBy: userId as string,
      },
    });
    //console.log(newInvoice);
    return newInvoice;
  } catch (error) {
    //console.log(error);
  }
};
