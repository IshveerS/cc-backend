generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @unique @default(uuid())
  email                String                 @unique @db.VarChar(255)
  password             String                 @db.VarChar(255)
  createdAt            DateTime               @default(now())
  name                 String?                @db.VarChar(255)
  photoURL             String?                @db.VarChar(255)
  country              String?                @db.VarChar(100)
  phoneNumber          String?                @db.VarChar(100)
  role                 Role
  updatedAt            DateTime               @updatedAt
  status               Status                 @default(pending)
  admin                Admin?
  creator              Creator?
  finance              Finance?
  Event                Event?                 @relation(fields: [eventId], references: [id])
  eventId              String?
  Pitch                Pitch[]
  ShortListedCreator   ShortListedCreator[]
  // FilterPitch        FilterPitch[]
  FirstDraft           FirstDraft[]
  FinalDraft           FinalDraft[]
  // Task                 Task[]
  campaignTimelineTask CampaignTimelineTask[]

  NotificationStatus NotificationStatus[]
}

model Admin {
  id                    String                  @id @unique @default(cuid())
  designation           Designation
  mode                  Mode                    @default(normal)
  inviteToken           String?                 @unique
  userId                String                  @unique
  user                  User                    @relation(fields: [userId], references: [id])
  AdminPermissionModule AdminPermissionModule[]
  CampaignAdmin         CampaignAdmin[]
}

enum Designation {
  Finance
  CSM
  BD
  Growth
}

model Creator {
  id         String      @id @unique @default(cuid())
  pronounce  String?     @db.VarChar(100)
  address    String?     @db.VarChar(255)
  state      String?
  location   String?     @db.VarChar(100)
  birthDate  DateTime?
  instagram  String?     @db.VarChar(100)
  tiktok     String?     @db.VarChar(100)
  employment Employment? @default(others)
  languages  Json?
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  industries Industry[]
  interests  Interest[]
  MediaKit   MediaKit?
}

model MediaKit {
  id        String   @id @unique @default(cuid())
  photoUrl  String?
  name      String?
  about     String?
  interests String[]
  creatorId String   @unique
  creator   Creator  @relation(fields: [creatorId], references: [id])
}

model Industry {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Interest {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Finance {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Event {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  color       String
  allDay      Boolean
  userId      String
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model session {
  sid    String   @id @unique @default(cuid())
  sess   Json
  expire DateTime
}

// resgration number
model Company {
  id                  String     @id @unique @default(cuid())
  name                String     @db.VarChar(100)
  email               String?    @db.VarChar(255)
  phone               String?    @db.VarChar(255)
  website             String?    @db.VarChar(255)
  address             String     @db.VarChar(255)
  logo                String?    @db.VarChar(100)
  about               String?    @db.VarChar(255)
  objectives          Json?
  registration_number String     @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  brand               Brand[]
  // campaign            Campaign[]
  Campaign            Campaign[]
}

// resgration number
model Brand {
  id           String     @id @unique @default(cuid())
  name         String     @db.VarChar(100)
  email        String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  website      String?    @db.VarChar(255)
  logo         String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  service_name String?    @db.VarChar(255)
  instagram    String?    @db.VarChar(255)
  tiktok       String?    @db.VarChar(255)
  facebook     String?    @db.VarChar(255)
  objectives   Json?
  supBrand     SupBrand[]
  industries   Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Campaign     Campaign[]
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
}

model SupBrand {
  id                  String        @id @unique @default(cuid())
  name                String        @db.VarChar(255)
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(255)
  tiktok              String?       @db.VarChar(255)
  instagram           String?       @db.VarChar(255)
  website             String?       @db.VarChar(255)
  logo                String?       @db.VarChar(255)
  registration_number String        @unique
  description         String?       @db.VarChar(255)
  service_name        String?       @db.VarChar(255)
  facebook            String?       @db.VarChar(255)
  intersets           Json?
  industries          Json?
  objectives          Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  brandId             String
  brand               Brand         @relation(fields: [brandId], references: [id])
  supSupBrand         SupSupBrand[]
}

model SupSupBrand {
  id                  String   @id @unique @default(cuid())
  name                String   @db.VarChar(255)
  email               String?  @db.VarChar(255)
  phone               String?  @db.VarChar(255)
  tiktok              String?  @db.VarChar(255)
  instagram           String?  @db.VarChar(255)
  facebook            String?  @db.VarChar(255)
  website             String?  @db.VarChar(255)
  service_name        String?  @db.VarChar(255)
  registration_number String   @unique
  logo                String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  objectives          Json?
  intersets           Json?
  industries          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  supBrandId          String
  supBrand            SupBrand @relation(fields: [supBrandId], references: [id])
}

//campaign peroid and intervals
model Campaign {
  id                  String               @id @unique @default(cuid())
  name                String
  description         String
  status              CampaignStatus
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  brand               Brand?               @relation(fields: [brandId], references: [id])
  brandId             String?
  company             Company?             @relation(fields: [companyId], references: [id])
  companyId           String?
  campaignBrief       CampaignBrief?
  campaignRequirement CampaignRequirement?

  CampaignAdmin        CampaignAdmin[]
  Pitch                Pitch[]
  ShortListedCreator   ShortListedCreator[]
  FirstDraft           FirstDraft[]
  FinalDraft           FinalDraft[]
  // Task                    Task[]
  campaignTimelineTask CampaignTimelineTask[]
  CampaignTimeline     CampaignTimeline[]
}

model CampaignAdmin {
  adminId    String
  campaignId String
  admin      Admin    @relation(fields: [adminId], references: [userId])
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([adminId, campaignId])
  @@index([adminId])
  @@index([campaignId])
}

model CampaignRequirement {
  id              String   @id @unique @default(cuid())
  gender          String[]
  age             String[]
  geoLocation     String[]
  language        String[]
  creator_persona String[]
  user_persona    String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignBrief {
  id             String   @id @unique @default(cuid())
  title          String   @db.VarChar(255)
  objectives     String?  @db.VarChar(255)
  images         Json?
  agreementFrom  String   @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  interests      Json?
  industries     Json?
  success        String?  @db.VarChar(255)
  campaigns_do   Json?
  campaigns_dont Json?
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  campaignId     String   @unique
  campaign       Campaign @relation(fields: [campaignId], references: [id])
}

model Permission {
  id                    String                  @id @unique @default(cuid())
  name                  Permissions
  description           String?
  AdminPermissionModule AdminPermissionModule[]
}

model Module {
  id                    String                  @id @unique @default(cuid())
  name                  Modules
  description           String?
  AdminPermissionModule AdminPermissionModule[]
}

model AdminPermissionModule {
  id           String     @id @unique @default(cuid())
  adminId      String
  moduleId     String
  permissionId String
  admin        Admin      @relation(fields: [adminId], references: [id])
  module       Module     @relation(fields: [moduleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

enum Permissions {
  create
  read
  update
  delete
}

enum Modules {
  creator
  campaign
  brand
  metric
  invoice
}

enum Resources {
  creator
  brand
  campaign
}

enum Mode {
  god
  normal
}

enum Status {
  active
  pending
  banned
  rejected
}

enum CampaignStatus {
  draft
  active
  paused
  completed
  cancelled
  expired
}

enum Role {
  admin
  creator
  brand
  superadmin
}

enum Stage {
  publish
  draft
}

enum Employment {
  fulltime
  freelance
  part_time
  student
  in_between
  unemployed
  others
}

enum CampaignTimelineStatus {
  close
  active
}

// Default Timeline Schema
model TimelineTypeDefault {
  id              String           @id @unique @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  TimelineDefault TimelineDefault?
}

// Default Timeline Schema
model TimelineDefault {
  id                    String                          @id @unique @default(cuid())
  timelineTypeDefaultId String                          @unique
  for                   String?
  duration              Int
  createdAt             DateTime                        @default(now())
  updatedAt             DateTime                        @updatedAt
  timelineType          TimelineTypeDefault             @relation(fields: [timelineTypeDefaultId], references: [id])
  dependencies          TimelineTypeDependencyDefault[] @relation("DependsOnTimeline")
  dependsOn             TimelineTypeDependencyDefault[] @relation("TimelineDependencies")
}

// Default Timeline Schema
model TimelineTypeDependencyDefault {
  id                  String           @id @unique @default(cuid())
  timeline_id         String
  dependsOnTimelineId String
  timeline            TimelineDefault? @relation("TimelineDependencies", fields: [timeline_id], references: [id])
  dependsOnTimeline   TimelineDefault? @relation("DependsOnTimeline", fields: [dependsOnTimelineId], references: [id])
}

model CampaignTimeline {
  id                         String                       @id @unique @default(cuid())
  name                       String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  for                        String?
  duration                   Int
  startDate                  DateTime
  endDate                    DateTime
  campaignId                 String
  campaignTimelineDependency CampaignTimelineDependency[] @relation("CampaignTimeline")
  dependsOnCampaignTimeline  CampaignTimelineDependency[] @relation("DependsOnCampaignTimeline")
  campaign                   Campaign?                    @relation(references: [id], fields: [campaignId])
  campaignTimelineTask       CampaignTimelineTask[]
}

model CampaignTimelineDependency {
  id                          String            @id @unique @default(cuid())
  campaignTimelineId          String
  dependsOnCampaignTimelineId String
  campaignTimeline            CampaignTimeline? @relation("CampaignTimeline", fields: [campaignTimelineId], references: [id], onDelete: Cascade)
  dependsOnCampaignTimeline   CampaignTimeline? @relation("DependsOnCampaignTimeline", fields: [dependsOnCampaignTimelineId], references: [id], onDelete: Cascade)
}

model Pitch {
  id         String       @id @unique @default(cuid())
  type       PitchType
  campaignId String
  campaign   Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  status     PitchStatus? @default(pending)
  content    String       @default("test")
  createdAt  DateTime     @default(now())
}

enum PitchType {
  video
  text
}

enum PitchStatus {
  pending
  approved
  rejected
  filtered
  undecided
}

model ShortListedCreator {
  // id               String   @id @unique @default(cuid())
  shortlisted_date DateTime @default(now())
  creatorId        String
  creator          User     @relation(fields: [creatorId], references: [id])
  campaign         Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId       String

  @@unique([creatorId, campaignId])
  @@index([creatorId])
}

model FirstDraft {
  id         String       @id @unique @default(cuid())
  creatorId  String
  creator    User         @relation(fields: [creatorId], references: [id])
  campaignId String
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  status     DraftStatus?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model FinalDraft {
  id         String       @id @unique @default(cuid())
  creatorId  String
  creator    User         @relation(fields: [creatorId], references: [id])
  campaignId String
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  status     DraftStatus?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// model Task {
//   id                   String                 @id @unique @default(cuid())
//   creatorId            String
//   campaignId           String
//   timelineId           String
//   name                 String
//   dueDate              DateTime
//   status               TaskStatus             @default(PENDING)
//   creator              User                   @relation(fields: [creatorId], references: [id])
//   campaign             Campaign               @relation(fields: [campaignId], references: [id])
//   timeline             CampaignTimeline       @relation(fields: [timelineId], references: [id])
//   CampaignTimelineTask CampaignTimelineTask[]
// }

enum DraftStatus {
  Pending
  Submitted
  Reviewed
  Approved
}

// schema.prisma

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_REVIEW
  APPROVED
  REJECTED
  ON_HOLD
  OVERDUE
  REVISIONS_REQUIRED
}

model CampaignTimelineTask {
  id                 String            @id @unique @default(cuid())
  userId             String
  task               String?
  campaignTimelineId String
  campaignId         String
  user               User?             @relation(references: [id], fields: [userId], onDelete: Cascade)
  timeline           CampaignTimeline? @relation(references: [id], fields: [campaignTimelineId], onDelete: Cascade)
  campaign           Campaign?         @relation(references: [id], fields: [campaignId], onDelete: Cascade)
  status             TaskStatus        @default(NOT_STARTED)
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime          @default(now())
  updatedAd          DateTime          @updatedAt
}

// model Notification {
//   id         String             @id @unique @default(cuid())
//   content    String
//   senderId   String?
//   receiverId String?
//   status     NotificationStatus @default(unread)
//   receiver   User?              @relation("receiver", references: [id], fields: [receiverId])
//   sender     User?              @relation("sender", references: [id], fields: [senderId])
//   createdAt  DateTime           @default(now())
//   userId     String?
// }

model Notification {
  id                 String               @id @unique @default(cuid())
  title              String
  message            String
  createdAt          DateTime             @default(now())
  notificationStatus NotificationStatus[]
  entity             Entity?
}

enum Entity {
  Campaign
  User
  Pitch
  Shortlist
  Timeline
}

model NotificationStatus {
  id             String       @id @unique @default(cuid())
  userId         String
  notificationId String
  read           Boolean      @default(false)
  archive        Boolean      @default(false)
  readAt         DateTime?    @default(now())
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}
