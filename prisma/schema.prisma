generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique @default(cuid())
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  createdAt          DateTime             @default(now())
  name               String?              @db.VarChar(255)
  photoURL           String?              @db.VarChar(255)
  country            String?              @db.VarChar(100)
  phoneNumber        String?              @db.VarChar(100)
  role               Role
  updatedAt          DateTime             @updatedAt
  status             Status               @default(pending)
  admin              Admin?
  creator            Creator?
  finance            Finance?
  event              Event?               @relation(fields: [eventId], references: [id])
  eventId            String?
  pitch              Pitch[]
  shortlisted        ShortListedCreator[]
  // campaignTasks      CampaignTask[]
  notiifcationStatus NotificationStatus[]
  campaignLogs       CampaignLog[]
  threads            Thread[]             @relation("UserThreads")
  UserThread         UserThread[]
  sentMessages       Message[]            @relation("UserMessages")
  feedback           Feedback[]
  submission         Submission[]
  CampaignTaskAdmin  CampaignTaskAdmin[]
}

model Admin {
  id                    String                  @id @unique @default(cuid())
  designation           Designation
  mode                  Mode                    @default(normal)
  inviteToken           String?                 @unique
  userId                String                  @unique
  user                  User                    @relation(fields: [userId], references: [id])
  adminPermissionModule AdminPermissionModule[]
  campaignAdmin         CampaignAdmin[]
}

enum Designation {
  Finance
  CSM
  BD
  Growth
}

model Creator {
  id         String      @id @unique @default(cuid())
  pronounce  String?     @db.VarChar(100)
  address    String?
  state      String?
  location   String?
  birthDate  DateTime?
  instagram  String?     @db.VarChar(100)
  tiktok     String?     @db.VarChar(100)
  employment Employment? @default(others)
  languages  Json?
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  industries Industry[]
  interests  Interest[]
  mediaKit   MediaKit?
}

model MediaKit {
  id        String   @id @unique @default(cuid())
  photoUrl  String?
  name      String?
  about     String?
  interests String[]
  creatorId String   @unique
  creator   Creator  @relation(fields: [creatorId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  threadId  String?
  thread    Thread?  @relation(fields: [threadId], references: [id])
  senderId  String?
  sender    User?    @relation(fields: [senderId], references: [id], name: "UserMessages")
}

model Thread {
  id          String       @id @unique @default(cuid())
  title       String
  description String
  photoURL    String?      @db.VarChar(255)
  users       User[]       @relation("UserThreads")
  UserThread  UserThread[]
  messages    Message[]
  archived    Boolean      @default(false)
  isGroup     Boolean      @default(true)
  campaignId  String?      @unique
  campaign    Campaign?    @relation(fields: [campaignId], references: [id])
}

model UserThread {
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id])
  thread   Thread @relation(fields: [threadId], references: [id])

  @@id([userId, threadId])
}

model Industry {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Interest {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId])
}

model Finance {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Event {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  color       String
  allDay      Boolean
  userId      String
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model session {
  sid    String   @id @unique @default(cuid())
  sess   Json
  expire DateTime
}

// resgration number
model Company {
  id                  String     @id @unique @default(cuid())
  name                String     @db.VarChar(100)
  email               String?    @db.VarChar(255)
  phone               String?    @db.VarChar(255)
  website             String?    @db.VarChar(255)
  address             String     @db.VarChar(255)
  logo                String?    @db.VarChar(100)
  about               String?    @db.VarChar(255)
  objectives          Json?
  registration_number String     @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  brand               Brand[]
  campaign            Campaign[]
}

// resgration number
model Brand {
  id           String     @id @unique @default(cuid())
  name         String     @db.VarChar(100)
  email        String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  website      String?    @db.VarChar(255)
  logo         String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  service_name String?    @db.VarChar(255)
  instagram    String?    @db.VarChar(255)
  tiktok       String?    @db.VarChar(255)
  facebook     String?    @db.VarChar(255)
  objectives   Json?
  supBrand     SupBrand[]
  industries   Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  campaign     Campaign[]
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
}

model SupBrand {
  id                  String        @id @unique @default(cuid())
  name                String        @db.VarChar(255)
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(255)
  tiktok              String?       @db.VarChar(255)
  instagram           String?       @db.VarChar(255)
  website             String?       @db.VarChar(255)
  logo                String?       @db.VarChar(255)
  registration_number String        @unique
  description         String?       @db.VarChar(255)
  service_name        String?       @db.VarChar(255)
  facebook            String?       @db.VarChar(255)
  intersets           Json?
  industries          Json?
  objectives          Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  brandId             String
  brand               Brand         @relation(fields: [brandId], references: [id])
  supSupBrand         SupSupBrand[]
}

model SupSupBrand {
  id                  String   @id @unique @default(cuid())
  name                String   @db.VarChar(255)
  email               String?  @db.VarChar(255)
  phone               String?  @db.VarChar(255)
  tiktok              String?  @db.VarChar(255)
  instagram           String?  @db.VarChar(255)
  facebook            String?  @db.VarChar(255)
  website             String?  @db.VarChar(255)
  service_name        String?  @db.VarChar(255)
  registration_number String   @unique
  logo                String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  objectives          Json?
  intersets           Json?
  industries          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  supBrandId          String
  supBrand            SupBrand @relation(fields: [supBrandId], references: [id])
}

//campaign peroid and intervals
model Campaign {
  id                            String                          @id @unique @default(cuid())
  name                          String
  description                   String
  status                        CampaignStatus                  @default(SCHEDULED)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  brand                         Brand?                          @relation(fields: [brandId], references: [id])
  brandId                       String?
  company                       Company?                        @relation(fields: [companyId], references: [id])
  companyId                     String?
  campaignBrief                 CampaignBrief?
  campaignRequirement           CampaignRequirement?
  campaignAdmin                 CampaignAdmin[]
  pitch                         Pitch[]
  shortlisted                   ShortListedCreator[]
  campaignTasks                 CampaignTask[]
  campaignTimeline              CampaignTimeline[]
  campaignLogs                  CampaignLog[]
  thread                        Thread?
  submission                    Submission[]
  campaignSubmissionRequirement CampaignSubmissionRequirement[]
}

model CampaignAdmin {
  adminId    String
  campaignId String
  admin      Admin    @relation(fields: [adminId], references: [userId])
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([adminId, campaignId])
  @@index([adminId])
  @@index([campaignId])
}

model CampaignRequirement {
  id              String   @id @unique @default(cuid())
  gender          String[]
  age             String[]
  geoLocation     String[]
  language        String[]
  creator_persona String[]
  user_persona    String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignBrief {
  id             String   @id @unique @default(cuid())
  title          String   @db.VarChar(255)
  objectives     String?  @db.VarChar(255)
  images         Json?
  agreementFrom  String   @db.VarChar(255)
  startDate      DateTime
  endDate        DateTime
  interests      Json?
  industries     Json?
  success        String?  @db.VarChar(255)
  campaigns_do   Json?
  campaigns_dont Json?
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  campaignId     String   @unique
  campaign       Campaign @relation(fields: [campaignId], references: [id])
}

model Permission {
  id                    String                  @id @unique @default(cuid())
  name                  Permissions
  description           String?
  adminPermissionModule AdminPermissionModule[]
}

model Module {
  id                    String                  @id @unique @default(cuid())
  name                  Modules
  description           String?
  adminPermissionModule AdminPermissionModule[]
}

model AdminPermissionModule {
  id           String     @id @unique @default(cuid())
  adminId      String
  moduleId     String
  permissionId String
  admin        Admin      @relation(fields: [adminId], references: [id])
  module       Module     @relation(fields: [moduleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

enum Permissions {
  create
  read
  update
  delete
}

enum Modules {
  creator
  campaign
  brand
  metric
  invoice
}

enum Resources {
  creator
  brand
  campaign
}

enum Mode {
  god
  normal
}

enum Status {
  active
  pending
  banned
  rejected
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  EXPIRED
  SCHEDULED
}

enum Role {
  admin
  creator
  brand
  superadmin
}

enum Stage {
  publish
  draft
}

enum Employment {
  fulltime
  freelance
  part_time
  student
  in_between
  unemployed
  others
}

enum CampaignTimelineStatus {
  close
  active
}

// Default Timeline Schema
model TimelineDefault {
  id                    String              @id @unique @default(cuid())
  timelineTypeDefaultId String              @unique
  for                   String?
  duration              Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  timelineType          TimelineTypeDefault @relation(fields: [timelineTypeDefaultId], references: [id])
}

// Strictly Define Campaign Timeline Type
model TimelineTypeDefault {
  id              String           @id @unique @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  timelineDefault TimelineDefault?
}

model CampaignTimeline {
  id               String          @id @unique @default(cuid())
  name             String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  for              String?
  description      String?
  duration         Int
  startDate        DateTime
  endDate          DateTime
  campaignId       String
  order            Int
  status           TimelineStatus  @default(OPEN)
  campaign         Campaign?       @relation(references: [id], fields: [campaignId])
  campaignTasks    CampaignTask[]
  submissionTypeId String?
  submissionType   SubmissionType? @relation(references: [id], fields: [submissionTypeId])
}

enum TimelineStatus {
  OPEN
  CLOSED
}

model CampaignLog {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  message    String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  admin      User     @relation(fields: [adminId], references: [id])
  adminId    String
}

model Pitch {
  id         String       @id @unique @default(cuid())
  type       PitchType
  campaignId String
  campaign   Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  status     PitchStatus? @default(pending)
  content    String       @default("test")
  createdAt  DateTime     @default(now())

  @@unique([userId, campaignId])
}

enum PitchType {
  video
  text
}

enum PitchStatus {
  pending
  approved
  rejected
  filtered
  undecided
}

model ShortListedCreator {
  id               String   @id @default(cuid())
  campaign         Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId       String
  userId           String?
  shortlisted_date DateTime @default(now())
  user             User?    @relation(fields: [userId], references: [id])

  @@unique([userId, campaignId])
  @@index([userId])
}

enum DraftStatus {
  Pending
  Submitted
  Request_For_Edit
  Reviewed
  Approved
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_REVIEW
  APPROVED
  REJECTED
  ON_HOLD
  OVERDUE
  CHANGES_REQUIRED
}

model CampaignTask {
  id                     String                   @id @unique @default(cuid())
  // userId                 String
  task                   String?
  campaignTimelineId     String
  campaignId             String
  // user                   User?                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  timeline               CampaignTimeline         @relation(references: [id], fields: [campaignTimelineId], onDelete: Cascade)
  campaign               Campaign?                @relation(references: [id], fields: [campaignId], onDelete: Cascade)
  status                 TaskStatus               @default(NOT_STARTED)
  dueDate                DateTime?
  createdAt              DateTime                 @default(now())
  updatedAd              DateTime                 @updatedAt
  campaignTaskDependency CampaignTaskDependency[] @relation("CampaignTask")
  dependsOnCampaignTask  CampaignTaskDependency[] @relation("DependsOnCampaignTask")
  campaignTaskAdmin      CampaignTaskAdmin[]
}

model CampaignTaskAdmin {
  id             String       @id @default(cuid())
  userId         String
  campaignTaskId String
  user           User         @relation(references: [id], fields: [userId], onDelete: Cascade)
  campaignTask   CampaignTask @relation(references: [id], fields: [campaignTaskId], onDelete: Cascade)

  @@unique([userId, campaignTaskId])
}

model CampaignTaskDependency {
  id                        String        @id @unique @default(cuid())
  campaignTaskId            String
  dependsOnCampaignTaskId   String
  campaignTimeline          CampaignTask? @relation("CampaignTask", fields: [campaignTaskId], references: [id], onDelete: Cascade)
  dependsOnCampaignTimeline CampaignTask? @relation("DependsOnCampaignTask", fields: [dependsOnCampaignTaskId], references: [id], onDelete: Cascade)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Notification {
  id                 String               @id @unique @default(cuid())
  title              String
  message            String
  createdAt          DateTime             @default(now())
  notificationStatus NotificationStatus[]
  entity             Entity?
}

enum Entity {
  Campaign
  User
  Pitch
  Shortlist
  Timeline
  Feedback
  Draft
  Post
  Approval
  Logistic
  Inbox
  Invoice
}

model NotificationStatus {
  id             String       @id @unique @default(cuid())
  userId         String
  notificationId String
  read           Boolean      @default(false)
  archive        Boolean      @default(false)
  readAt         DateTime?    @default(now())
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}

// This modal is 
model Submission {
  id               String                 @id @default(cuid())
  content          String?
  caption          String?
  campaignId       String
  status           TaskStatus             @default(IN_PROGRESS)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  submissionDate   DateTime?
  dueDate          DateTime?
  userId           String
  submissionTypeId String
  user             User                   @relation(fields: [userId], references: [id])
  campaign         Campaign               @relation(fields: [campaignId], references: [id])
  submissionType   SubmissionType         @relation(fields: [submissionTypeId], references: [id])
  feedback         Feedback?
  isReview         Boolean                @default(false)
  dependencies     SubmissionDependency[] @relation("Dependencies")
  dependentOn      SubmissionDependency[] @relation("DependentOn")

  @@unique([userId, campaignId, submissionTypeId]) // Ensures unique submission per user per project type
}

model SubmissionDependency {
  id                    String     @id @default(cuid())
  submissionId          String
  dependentSubmissionId String
  submission            Submission @relation("DependentOn", fields: [submissionId], references: [id], onDelete: Cascade)
  dependentSubmission   Submission @relation("Dependencies", fields: [dependentSubmissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, dependentSubmissionId]) // Prevent duplicate dependencies
}

model CampaignSubmissionRequirement {
  id               String         @id @default(cuid())
  order            Int // Specifies the order in which this submission type should be completed
  campaignId       String
  submissionTypeId String
  startDate        DateTime
  endDate          DateTime
  campaign         Campaign       @relation(fields: [campaignId], references: [id])
  submissionType   SubmissionType @relation(fields: [submissionTypeId], references: [id])

  @@unique([campaignId, submissionTypeId]) // Ensures unique submission type per project
}

model SubmissionType {
  id               String                          @id @default(cuid())
  type             SubmissionEnum // E.g., "Document", "Video", "Presentation"
  description      String? // Optional description for the type
  requirements     CampaignSubmissionRequirement[] // Reference to requirements
  submissions      Submission[] // Submissions of this type
  campaignTimeline CampaignTimeline[]
}

model Feedback {
  id           String        @id @unique @default(cuid())
  content      String?
  type         FeedbackType?
  submissionId String        @unique
  submission   Submission    @relation(fields: [submissionId], references: [id])
  adminId      String
  admin        User          @relation(fields: [adminId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum SubmissionEnum {
  AGREEMENT_FORM
  FIRST_DRAFT
  FINAL_DRAFT
  POSTING
  OTHER
}

enum FeedbackType {
  COMMENT
  REASON
}
