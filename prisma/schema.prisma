generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @unique @default(uuid())
  email       String   @unique @db.VarChar(255)
  password    String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  name        String?  @db.VarChar(255)
  photoURL    String?  @db.VarChar(255)
  country     String?  @db.VarChar(100)
  phoneNumber String?  @db.VarChar(100)
  role        Role
  updatedAt   DateTime @updatedAt
  status      Status   @default(pending)
  admin       Admin?

  creator Creator?
  finance Finance?
}

model Admin {
  id          String     @id @unique @default(cuid())
  designation String?
  mode        Mode       @default(normal)
  adminRole   String?
  inviteToken String?    @unique
  userId      String     @unique
  campaign    Campaign[]
  user        User       @relation(fields: [userId], references: [id])
}

model Creator {
  id          String      @id @unique @default(cuid())
  firstName   String      @db.VarChar(100)
  lastName    String      @db.VarChar(100)
  pronounce   String?     @db.VarChar(100)
  nationality String?     @db.VarChar(100)
  location    String?     @db.VarChar(100)
  birthDate   DateTime?
  instagram   String?     @db.VarChar(100)
  tiktok      String?     @db.VarChar(100)
  employment  Employment? @default(others)
  languages   Json?
  industries  Industry[]
  interests   Interest[]
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
}

// give more privlage to userId

// model Language {
//   id        String  @id @unique @default(cuid())
//   name      String?
//   creator   Creator @relation(fields: [userId], references: [userId])
//   userId String
// }

model Industry {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  creator Creator @relation(fields: [userId], references: [userId])
  userId  String
}

model Interest {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  creator Creator @relation(fields: [userId], references: [userId])
  userId  String
}

model Finance {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model session {
  sid    String   @id @unique @default(cuid())
  sess   Json
  expire DateTime
}

// resgration number
model Company {
  id                  String     @id @unique @default(cuid())
  name                String     @db.VarChar(100)
  email               String?    @db.VarChar(255)
  phone               String?    @db.VarChar(255)
  website             String?    @db.VarChar(255)
  address             String     @db.VarChar(255)
  logo                String?    @db.VarChar(100)
  about               String?    @db.VarChar(255)
  objectives          Json?
  registration_number String     @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  brand               Brand[]
  campaign            Campaign[]
}

// resgration number
model Brand {
  id                  String     @id @unique @default(cuid())
  name                String     @db.VarChar(100)
  email               String?    @db.VarChar(255)
  phone               String?    @db.VarChar(255)
  website             String?    @db.VarChar(255)
  logo                String?    @db.VarChar(255)
  description         String?    @db.VarChar(255)
  service_name        String?    @db.VarChar(255)
  instagram           String?    @db.VarChar(255)
  registration_number String     @unique
  tiktok              String?    @db.VarChar(255)
  facebook            String?    @db.VarChar(255)
  objectives          Json?
  supBrand            SupBrand[]
  intersets           Json?
  indystries          Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  companyId           String
  company             Company    @relation(fields: [companyId], references: [id])
}

model SupBrand {
  id                  String        @id @unique @default(cuid())
  name                String        @db.VarChar(255)
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(255)
  tiktok              String?       @db.VarChar(255)
  instagram           String?       @db.VarChar(255)
  website             String?       @db.VarChar(255)
  logo                String?       @db.VarChar(255)
  registration_number String        @unique
  description         String?       @db.VarChar(255)
  service_name        String?       @db.VarChar(255)
  facebook            String?       @db.VarChar(255)
  intersets           Json?
  indystries          Json?
  objectives          Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  brandId             String
  brand               Brand         @relation(fields: [brandId], references: [id])
  supSupBrand         SupSupBrand[]
}

model SupSupBrand {
  id                  String   @id @unique @default(cuid())
  name                String   @db.VarChar(255)
  email               String?  @db.VarChar(255)
  phone               String?  @db.VarChar(255)
  tiktok              String?  @db.VarChar(255)
  instagram           String?  @db.VarChar(255)
  facebook            String?  @db.VarChar(255)
  website             String?  @db.VarChar(255)
  service_name        String?  @db.VarChar(255)
  registration_number String   @unique
  logo                String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  objectives          Json?
  intersets           Json?
  indystries          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  supBrandId          String
  supBrand            SupBrand @relation(fields: [supBrandId], references: [id])
}

//campaign peroid and intervals
model Campaign {
  id                  String               @id @unique @default(cuid())
  name                String
  status              Status               @default(pending)
  userId              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Admin               Admin                @relation(fields: [userId], references: [userId])
  campaignBrief       CampaignBrief?
  campaignRequirnment CampaignRequirnment?
  companyId           String
  company             Company              @relation(fields: [companyId], references: [id])
}

model CampaignRequirnment {
  id              String   @id @unique @default(cuid())
  gender          String   @db.VarChar(255)
  age             String   @db.VarChar(255)
  geoLocation     String   @db.VarChar(255)
  language        Json?
  creator_persona String   @db.VarChar(255)
  user_persona    String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignBrief {
  id             String   @id @unique @default(cuid())
  title          String   @db.VarChar(255)
  objectives     String   @db.VarChar(255)
  coverImage     String   @db.VarChar(255)
  success        String   @db.VarChar(255)
  campaigns_do   String   @db.VarChar(255)
  campaigns_dont String   @db.VarChar(255)
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  campaignId     String   @unique
  campaign       Campaign @relation(fields: [campaignId], references: [id])
}

enum Mode {
  god
  normal
}

enum Status {
  active
  pending
  banned
  rejected
}

enum Role {
  admin
  creator
  brand
}

enum Employment {
  fulltime
  freelance
  part_time
  student
  in_between
  unemployed
  others
}
